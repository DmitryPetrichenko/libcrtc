import("//webrtc/webrtc.gni")

rtc_shared_library("crtc") {
  libs = []
  defines = []

  sources = [
    "src/atomic.cc",
    "src/event.cc",
    "src/error.cc",
    "src/arraybuffer.cc",
    "src/worker.cc",
    "src/async.cc",
    "src/module.cc",
    "src/rtcpeerconnection.cc",
    "src/rtcdatachannel.cc",
    "src/mediastream.cc",
    "src/mediastreamtrack.cc",
    "src/time.cc",
  ]

  if (is_win) {
    defines += [
      "CRTC_OS_WIN"
    ]
  } else {
    defines += [
      "CRTC_OS_POSIX"
    ]
  }

  if (is_mac) {
    defines += [
      "CRTC_OS_OSX"
    ]
  }

  cflags = [
    "-fexceptions",
  ]

  cflags_cc = [
    "-fexceptions",
  ]

  deps = [
    "//third_party/libyuv",
    "//webrtc/pc:libjingle_peerconnection",
    "//webrtc/system_wrappers:field_trial_default",
    "//webrtc/system_wrappers:metrics_default",
  ]

  if (!build_with_chromium && is_clang) {
    suppressed_configs += [ "//build/config/clang:find_bad_constructs" ]
  }

  include_dirs = [
    "src/protobuf",
    "include",
  ]
}

rtc_executable("mesh") {
  sources = [
    "examples/mesh.cc",
  ]

  deps = [
    ":crtc",
  ]

  include_dirs = [
    "include"
  ]
}

rtc_executable("peerconnection") {
  sources = [
    "examples/peerconnection.cc",
  ]

  deps = [
    ":crtc",
  ]

  include_dirs = [
    "include"
  ]
}

group("crtc-examples") {
  public_deps = [
    ":mesh",
    ":peerconnection",
  ]
}

