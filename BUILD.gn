declare_args() {
  build_with_chromium = false
  use_x11 = false
}

import("//webrtc/webrtc.gni")

component("crtc") {
  libs = []
  defines = [
    "NDEBUG",
  ]

  sources = [
    "src/atomic.cc",
    "src/event.cc",
    "src/error.cc",
    "src/arraybuffer.cc",
    "src/worker.cc",
    "src/async.cc",
    "src/module.cc",
    "src/rtcpeerconnection.cc",
    "src/rtcdatachannel.cc",
    "src/mediastream.cc",
    "src/mediastreamtrack.cc",
    "src/audiosink.cc",
    "src/videosource.cc",
    "src/videosink.cc",
    "src/imagebuffer.cc",
    "src/time.cc",
    "src/audiobuffer.cc",
    "src/audiosource.cc",
  ]

  if (is_win) {
    defines += [
      "CRTC_OS_WIN"
    ]
  } else {
    defines += [
      "CRTC_OS_POSIX"
    ]
  }

  if (is_mac) {
    defines += [
      "CRTC_OS_OSX"
    ]
  }

  cflags = [
    "-fexceptions",
  ]

  cflags_cc = [
    "-fexceptions",
  ]

  deps = [
    "//third_party/libyuv",
    "//webrtc/pc:libjingle_peerconnection",
    "//webrtc/system_wrappers:field_trial_default",
    "//webrtc/system_wrappers:metrics_default",
  ]

  include_dirs = [
    "src/protobuf",
    "include",
  ]
}

executable("promise") {
  sources = [
    "examples/promise.cc",
  ]

  deps = [
    ":crtc",
  ]

  include_dirs = [
    "include"
  ]
}

executable("mesh") {
  sources = [
    "examples/mesh.cc",
  ]

  deps = [
    ":crtc",
  ]

  include_dirs = [
    "include"
  ]
}

executable("peerconnection") {
  sources = [
    "examples/peerconnection.cc",
  ]

  deps = [
    ":crtc",
  ]

  include_dirs = [
    "include"
  ]
}

executable("worker") {
  sources = [
    "examples/worker.cc",
  ]

  deps = [
    ":crtc",
  ]

  include_dirs = [
    "include"
  ]
}

executable("source-sink") {
  sources = [
    "examples/source-sink.cc",
  ]

  deps = [
    ":crtc",
  ]

  include_dirs = [
    "include"
  ]
}

executable("ffmpeg") {
  sources = [
    "examples/ffmpeg.cc",
  ]

  deps = [
    ":crtc",
  ]

  include_dirs = [
    "include"
  ]
}

group("crtc-examples") {
  public_deps = [
    ":promise",
    ":mesh",
    ":peerconnection",
    ":worker",
    ":source-sink",
    ":ffmpeg",
  ]
}

